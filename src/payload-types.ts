/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    users: User;
    services: Service;
    projects: Project;
    'home-page': HomePage;
    blogs: Blog;
    newsletter: Newsletter;
    'contact-us': ContactUs;
    comments: Comment;
    careers: Career;
    'career-applications': CareerApplication;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    services: {
      projects: 'projects';
    };
  };
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    'home-page': HomePageSelect<false> | HomePageSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    newsletter: NewsletterSelect<false> | NewsletterSelect<true>;
    'contact-us': ContactUsSelect<false> | ContactUsSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    careers: CareersSelect<false> | CareersSelect<true>;
    'career-applications': CareerApplicationsSelect<false> | CareerApplicationsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  backupUrl?: string | null;
  title: string;
  alt_text: string;
  uploader?: string | null;
  updatedAt: string;
  createdAt: string;
  url: string;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: string;
  title: string;
  slug: string;
  thumbnail?: string | null;
  blocks?:
    | {
        title?: string | null;
        image_url?: string | null;
        content?: string | null;
        id?: string | null;
      }[]
    | null;
  projects?: {
    docs?: (string | Project)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  title: string;
  slug: string;
  description?: string | null;
  image_url?: string | null;
  blocks?:
    | {
        image_url?: string | null;
        title: string;
        content?: string | null;
        id?: string | null;
      }[]
    | null;
  testimonials?:
    | {
        quote: string;
        author: string;
        role: string;
        id?: string | null;
      }[]
    | null;
  faq?:
    | {
        question: string;
        answer?: string | null;
        id?: string | null;
      }[]
    | null;
  services?: (string | Service)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-page".
 */
export interface HomePage {
  id: string;
  achievement?: {
    title?: string | null;
    description?: string | null;
    contents?:
      | {
          count?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  trusted_companies?:
    | {
        src?: string | null;
        width?: number | null;
        height?: number | null;
        id?: string | null;
      }[]
    | null;
  our_story?: {
    title?: string | null;
    description?: string | null;
    contents?:
      | {
          title?: string | null;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  featured_services?:
    | {
        image_url?: string | null;
        title?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  testimonials?:
    | {
        author?: string | null;
        role?: string | null;
        avatar?: string | null;
        quote?: string | null;
        id?: string | null;
      }[]
    | null;
  staff?:
    | {
        name?: string | null;
        role?: string | null;
        quote?: string | null;
        image_url?: string | null;
        social_links?: {
          twitter?: string | null;
          facebook?: string | null;
          linkedin?: string | null;
          instagram?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  author: string;
  blog_image?: string | null;
  content?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter".
 */
export interface Newsletter {
  id: string;
  email: string;
  status?: ('subscribed' | 'unsubscribed' | 'pending') | null;
  /**
   * Where the subscription came from
   */
  source?: string | null;
  ipAddress?: string | null;
  userAgent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-us".
 */
export interface ContactUs {
  id: string;
  name: string;
  email: string;
  message: string;
  status?: ('new' | 'in_progress' | 'responded' | 'closed') | null;
  priority?: ('low' | 'normal' | 'high' | 'urgent') | null;
  /**
   * Auto-generated or manually added subject
   */
  subject?: string | null;
  ipAddress?: string | null;
  userAgent?: string | null;
  responded?: boolean | null;
  /**
   * Internal notes about the response or follow-up
   */
  responseNotes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: string;
  authorName: string;
  authorEmail: string;
  comment: string;
  blog: string | Blog;
  status?: ('pending' | 'approved' | 'rejected') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "careers".
 */
export interface Career {
  id: string;
  title: string;
  /**
   * URL-friendly version of the job title
   */
  slug: string;
  department: 'engineering' | 'design' | 'marketing' | 'sales' | 'operations' | 'finance' | 'hr' | 'other';
  location: string;
  type: 'full-time' | 'part-time' | 'contract' | 'internship';
  /**
   * e.g., '2-5 years', 'Entry level', 'Senior level'
   */
  experience: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  requirements?:
    | {
        requirement: string;
        id?: string | null;
      }[]
    | null;
  benefits?:
    | {
        benefit: string;
        id?: string | null;
      }[]
    | null;
  status: 'active' | 'closed' | 'draft';
  applicationDeadline?: string | null;
  /**
   * How many people are you hiring for this role?
   */
  positions: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "career-applications".
 */
export interface CareerApplication {
  id: string;
  applicantName: string;
  applicantEmail: string;
  applicantPhone: string;
  position: string | Career;
  /**
   * Upload PDF, DOC, or image files
   */
  resume: string | Media;
  /**
   * Any additional information the applicant wants to share
   */
  coverLetter?: string | null;
  status: 'pending' | 'reviewing' | 'shortlisted' | 'interview' | 'rejected' | 'hired';
  /**
   * Internal notes about the application
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'services';
        value: string | Service;
      } | null)
    | ({
        relationTo: 'projects';
        value: string | Project;
      } | null)
    | ({
        relationTo: 'home-page';
        value: string | HomePage;
      } | null)
    | ({
        relationTo: 'blogs';
        value: string | Blog;
      } | null)
    | ({
        relationTo: 'newsletter';
        value: string | Newsletter;
      } | null)
    | ({
        relationTo: 'contact-us';
        value: string | ContactUs;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comment;
      } | null)
    | ({
        relationTo: 'careers';
        value: string | Career;
      } | null)
    | ({
        relationTo: 'career-applications';
        value: string | CareerApplication;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  backupUrl?: T;
  title?: T;
  alt_text?: T;
  uploader?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  thumbnail?: T;
  blocks?:
    | T
    | {
        title?: T;
        image_url?: T;
        content?: T;
        id?: T;
      };
  projects?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  image_url?: T;
  blocks?:
    | T
    | {
        image_url?: T;
        title?: T;
        content?: T;
        id?: T;
      };
  testimonials?:
    | T
    | {
        quote?: T;
        author?: T;
        role?: T;
        id?: T;
      };
  faq?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  services?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-page_select".
 */
export interface HomePageSelect<T extends boolean = true> {
  achievement?:
    | T
    | {
        title?: T;
        description?: T;
        contents?:
          | T
          | {
              count?: T;
              description?: T;
              id?: T;
            };
      };
  trusted_companies?:
    | T
    | {
        src?: T;
        width?: T;
        height?: T;
        id?: T;
      };
  our_story?:
    | T
    | {
        title?: T;
        description?: T;
        contents?:
          | T
          | {
              title?: T;
              description?: T;
              id?: T;
            };
      };
  featured_services?:
    | T
    | {
        image_url?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  testimonials?:
    | T
    | {
        author?: T;
        role?: T;
        avatar?: T;
        quote?: T;
        id?: T;
      };
  staff?:
    | T
    | {
        name?: T;
        role?: T;
        quote?: T;
        image_url?: T;
        social_links?:
          | T
          | {
              twitter?: T;
              facebook?: T;
              linkedin?: T;
              instagram?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  author?: T;
  blog_image?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter_select".
 */
export interface NewsletterSelect<T extends boolean = true> {
  email?: T;
  status?: T;
  source?: T;
  ipAddress?: T;
  userAgent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-us_select".
 */
export interface ContactUsSelect<T extends boolean = true> {
  name?: T;
  email?: T;
  message?: T;
  status?: T;
  priority?: T;
  subject?: T;
  ipAddress?: T;
  userAgent?: T;
  responded?: T;
  responseNotes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  authorName?: T;
  authorEmail?: T;
  comment?: T;
  blog?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "careers_select".
 */
export interface CareersSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  department?: T;
  location?: T;
  type?: T;
  experience?: T;
  description?: T;
  requirements?:
    | T
    | {
        requirement?: T;
        id?: T;
      };
  benefits?:
    | T
    | {
        benefit?: T;
        id?: T;
      };
  status?: T;
  applicationDeadline?: T;
  positions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "career-applications_select".
 */
export interface CareerApplicationsSelect<T extends boolean = true> {
  applicantName?: T;
  applicantEmail?: T;
  applicantPhone?: T;
  position?: T;
  resume?: T;
  coverLetter?: T;
  status?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}